//Brute force O(n^2)
class Solution {
    public boolean containsDuplicate(int[] nums) {
        int n = nums.length;
        int count = 0;
        for(int i = 0; i <= n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(nums[i] == nums[j]) count++;
            }
            if(count > 0) return true;
        }
        return false;
    }  
}

//Better O(n log n)
class Solution {
    public boolean containsDuplicate(int[] nums) {
        int n = nums.length;
        int count = 0;
        Arrays.sort(nums);
        for(int i = 0; i < n - 1; i++) {
            if(nums[i] == nums[i + 1]) return true;

        }  
        return false;
    }
    
}

//Optimal - O(n)
import java.util.HashSet;

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return true;
            }
            seen.add(num);
        }
        return false;
    }
}
