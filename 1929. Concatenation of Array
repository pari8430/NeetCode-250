//Brute force 
//Create an empty array or list.
//Loop through nums twice and append all elements.

public int[] getConcatenation(int[] nums) {
    int[] ans = new int[nums.length * 2];
    for (int i = 0; i < nums.length; i++) {
        ans[i] = nums[i];
    }
    for (int i = 0; i < nums.length; i++) {
        ans[i + nums.length] = nums[i];
    }
    return ans;
} //Time Complexity: O(n)
//Space Complexity: O(2n)


//Optimal-1
class Solution {
    public int[] getConcatenation(int[] nums) {
        int n = nums.length;
        int[] ans = new int[2*n];
        for(int i = 0; i < 2*n; i++) {
            ans[i] = nums[i%n];  
        }
        return ans;
    }
} //O(n)

//Optimal-1
public int[] getConcatenation(int[] nums) {
    int n = nums.length;
    int[] ans = new int[2 * n];
    for (int i = 0; i < n; i++) {
        ans[i] = nums[i];
        ans[i + n] = nums[i];
    }
    return ans;
}
